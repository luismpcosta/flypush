/*
 * This file is generated by jOOQ.
 */
package io.opensw.flypush.api.database.generated.tables;


import java.time.Instant;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Row15;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import io.opensw.flypush.api.database.generated.Keys;
import io.opensw.flypush.api.database.generated.Push;
import io.opensw.flypush.api.database.generated.tables.records.InstallationRecord;
import io.opensw.flypush.api.database.jooq.OffsetInstantConverter;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EngineInstallation extends TableImpl<InstallationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>push.installation</code>
     */
    public static final EngineInstallation ENGINE_INSTALLATION = new EngineInstallation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InstallationRecord> getRecordType() {
        return InstallationRecord.class;
    }

    /**
     * The column <code>push.installation.id</code>.
     */
    public final TableField<InstallationRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>push.installation.uuid</code>.
     */
    public final TableField<InstallationRecord, String> UUID = createField(DSL.name("uuid"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>push.installation.alias</code>.
     */
    public final TableField<InstallationRecord, String> ALIAS = createField(DSL.name("alias"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>push.installation.device_token</code>.
     */
    public final TableField<InstallationRecord, String> DEVICE_TOKEN = createField(DSL.name("device_token"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>push.installation.device_type</code>.
     */
    public final TableField<InstallationRecord, String> DEVICE_TYPE = createField(DSL.name("device_type"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>push.installation.operating_system</code>.
     */
    public final TableField<InstallationRecord, String> OPERATING_SYSTEM = createField(DSL.name("operating_system"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>push.installation.os_version</code>.
     */
    public final TableField<InstallationRecord, String> OS_VERSION = createField(DSL.name("os_version"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>push.installation.platform</code>.
     */
    public final TableField<InstallationRecord, String> PLATFORM = createField(DSL.name("platform"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>push.installation.variant_id</code>.
     */
    public final TableField<InstallationRecord, Integer> VARIANT_ID = createField(DSL.name("variant_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>push.installation.active</code>.
     */
    public final TableField<InstallationRecord, Boolean> ACTIVE = createField(DSL.name("active"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("true", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>push.installation.created_at</code>.
     */
    public final TableField<InstallationRecord, Instant> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "", new OffsetInstantConverter());

    /**
     * The column <code>push.installation.created_by</code>.
     */
    public final TableField<InstallationRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.CLOB.nullable(false).defaultValue(DSL.field("'NA'::text", SQLDataType.CLOB)), this, "");

    /**
     * The column <code>push.installation.updated_at</code>.
     */
    public final TableField<InstallationRecord, Instant> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "", new OffsetInstantConverter());

    /**
     * The column <code>push.installation.updated_by</code>.
     */
    public final TableField<InstallationRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.CLOB.nullable(false).defaultValue(DSL.field("'NA'::text", SQLDataType.CLOB)), this, "");

    /**
     * The column <code>push.installation.version</code>.
     */
    public final TableField<InstallationRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "");

    private EngineInstallation(Name alias, Table<InstallationRecord> aliased) {
        this(alias, aliased, null);
    }

    private EngineInstallation(Name alias, Table<InstallationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>push.installation</code> table reference
     */
    public EngineInstallation(String alias) {
        this(DSL.name(alias), ENGINE_INSTALLATION);
    }

    /**
     * Create an aliased <code>push.installation</code> table reference
     */
    public EngineInstallation(Name alias) {
        this(alias, ENGINE_INSTALLATION);
    }

    /**
     * Create a <code>push.installation</code> table reference
     */
    public EngineInstallation() {
        this(DSL.name("installation"), null);
    }

    @Override
    public Schema getSchema() {
        return Push.PUSH;
    }

    @Override
    public Identity<InstallationRecord, Integer> getIdentity() {
        return (Identity<InstallationRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<InstallationRecord> getPrimaryKey() {
        return Keys.INSTALLATION_PKEY;
    }

    @Override
    public List<UniqueKey<InstallationRecord>> getKeys() {
        return Arrays.<UniqueKey<InstallationRecord>>asList(Keys.INSTALLATION_PKEY);
    }

    @Override
    public List<ForeignKey<InstallationRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<InstallationRecord, ?>>asList(Keys.INSTALLATION__INSTALLATION_VARIANT_ID_FKEY);
    }

    @Override
    public EngineInstallation as(String alias) {
        return new EngineInstallation(DSL.name(alias), this);
    }

    @Override
    public EngineInstallation as(Name alias) {
        return new EngineInstallation(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EngineInstallation rename(String name) {
        return new EngineInstallation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EngineInstallation rename(Name name) {
        return new EngineInstallation(name, null);
    }

    // -------------------------------------------------------------------------
    // Row15 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row15<Integer, String, String, String, String, String, String, String, Integer, Boolean, Instant, String, Instant, String, Integer> fieldsRow() {
        return (Row15) super.fieldsRow();
    }
}

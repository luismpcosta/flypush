/*
 * This file is generated by jOOQ.
 */
package io.opensw.flypush.api.database.generated.tables;


import java.time.Instant;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import io.opensw.flypush.api.database.generated.Keys;
import io.opensw.flypush.api.database.generated.Push;
import io.opensw.flypush.api.database.generated.tables.records.TopicRecord;
import io.opensw.flypush.api.database.jooq.OffsetInstantConverter;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EngineTopic extends TableImpl<TopicRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>push.topic</code>
     */
    public static final EngineTopic ENGINE_TOPIC = new EngineTopic();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TopicRecord> getRecordType() {
        return TopicRecord.class;
    }

    /**
     * The column <code>push.topic.id</code>.
     */
    public final TableField<TopicRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>push.topic.uuid</code>.
     */
    public final TableField<TopicRecord, String> UUID = createField(DSL.name("uuid"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>push.topic.name</code>.
     */
    public final TableField<TopicRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>push.topic.active</code>.
     */
    public final TableField<TopicRecord, Boolean> ACTIVE = createField(DSL.name("active"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("true", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>push.topic.created_at</code>.
     */
    public final TableField<TopicRecord, Instant> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "", new OffsetInstantConverter());

    /**
     * The column <code>push.topic.created_by</code>.
     */
    public final TableField<TopicRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.CLOB.nullable(false).defaultValue(DSL.field("'NA'::text", SQLDataType.CLOB)), this, "");

    /**
     * The column <code>push.topic.updated_at</code>.
     */
    public final TableField<TopicRecord, Instant> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "", new OffsetInstantConverter());

    /**
     * The column <code>push.topic.updated_by</code>.
     */
    public final TableField<TopicRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.CLOB.nullable(false).defaultValue(DSL.field("'NA'::text", SQLDataType.CLOB)), this, "");

    /**
     * The column <code>push.topic.version</code>.
     */
    public final TableField<TopicRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "");

    private EngineTopic(Name alias, Table<TopicRecord> aliased) {
        this(alias, aliased, null);
    }

    private EngineTopic(Name alias, Table<TopicRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>push.topic</code> table reference
     */
    public EngineTopic(String alias) {
        this(DSL.name(alias), ENGINE_TOPIC);
    }

    /**
     * Create an aliased <code>push.topic</code> table reference
     */
    public EngineTopic(Name alias) {
        this(alias, ENGINE_TOPIC);
    }

    /**
     * Create a <code>push.topic</code> table reference
     */
    public EngineTopic() {
        this(DSL.name("topic"), null);
    }

    @Override
    public Schema getSchema() {
        return Push.PUSH;
    }

    @Override
    public Identity<TopicRecord, Integer> getIdentity() {
        return (Identity<TopicRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TopicRecord> getPrimaryKey() {
        return Keys.TOPIC_PKEY;
    }

    @Override
    public List<UniqueKey<TopicRecord>> getKeys() {
        return Arrays.<UniqueKey<TopicRecord>>asList(Keys.TOPIC_PKEY);
    }

    @Override
    public EngineTopic as(String alias) {
        return new EngineTopic(DSL.name(alias), this);
    }

    @Override
    public EngineTopic as(Name alias) {
        return new EngineTopic(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EngineTopic rename(String name) {
        return new EngineTopic(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EngineTopic rename(Name name) {
        return new EngineTopic(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Integer, String, String, Boolean, Instant, String, Instant, String, Integer> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}

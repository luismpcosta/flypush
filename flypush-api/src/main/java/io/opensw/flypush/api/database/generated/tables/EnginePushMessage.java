/*
 * This file is generated by jOOQ.
 */
package io.opensw.flypush.api.database.generated.tables;


import java.time.Instant;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import io.opensw.flypush.api.database.generated.Keys;
import io.opensw.flypush.api.database.generated.Push;
import io.opensw.flypush.api.database.generated.tables.records.PushMessageRecord;
import io.opensw.flypush.api.database.jooq.JSONBBinding;
import io.opensw.flypush.api.database.jooq.Jsonb;
import io.opensw.flypush.api.database.jooq.OffsetInstantConverter;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EnginePushMessage extends TableImpl<PushMessageRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>push.push_message</code>
     */
    public static final EnginePushMessage ENGINE_PUSH_MESSAGE = new EnginePushMessage();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PushMessageRecord> getRecordType() {
        return PushMessageRecord.class;
    }

    /**
     * The column <code>push.push_message.id</code>.
     */
    public final TableField<PushMessageRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>push.push_message.application_id</code>.
     */
    public final TableField<PushMessageRecord, Integer> APPLICATION_ID = createField(DSL.name("application_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>push.push_message.message</code>.
     */
    public final TableField<PushMessageRecord, Jsonb> MESSAGE = createField(DSL.name("message"), SQLDataType.JSONB.nullable(false), this, "", new JSONBBinding());

    /**
     * The column <code>push.push_message.ip_address</code>.
     */
    public final TableField<PushMessageRecord, String> IP_ADDRESS = createField(DSL.name("ip_address"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>push.push_message.client_identifier</code>.
     */
    public final TableField<PushMessageRecord, String> CLIENT_IDENTIFIER = createField(DSL.name("client_identifier"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>push.push_message.open_counter</code>.
     */
    public final TableField<PushMessageRecord, Integer> OPEN_COUNTER = createField(DSL.name("open_counter"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>push.push_message.first_open_at</code>.
     */
    public final TableField<PushMessageRecord, Instant> FIRST_OPEN_AT = createField(DSL.name("first_open_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "", new OffsetInstantConverter());

    /**
     * The column <code>push.push_message.last_open_at</code>.
     */
    public final TableField<PushMessageRecord, Instant> LAST_OPEN_AT = createField(DSL.name("last_open_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "", new OffsetInstantConverter());

    /**
     * The column <code>push.push_message.created_at</code>.
     */
    public final TableField<PushMessageRecord, Instant> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "", new OffsetInstantConverter());

    /**
     * The column <code>push.push_message.created_by</code>.
     */
    public final TableField<PushMessageRecord, String> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.CLOB.nullable(false).defaultValue(DSL.field("'NA'::text", SQLDataType.CLOB)), this, "");

    /**
     * The column <code>push.push_message.updated_at</code>.
     */
    public final TableField<PushMessageRecord, Instant> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "", new OffsetInstantConverter());

    /**
     * The column <code>push.push_message.updated_by</code>.
     */
    public final TableField<PushMessageRecord, String> UPDATED_BY = createField(DSL.name("updated_by"), SQLDataType.CLOB.nullable(false).defaultValue(DSL.field("'NA'::text", SQLDataType.CLOB)), this, "");

    /**
     * The column <code>push.push_message.version</code>.
     */
    public final TableField<PushMessageRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "");

    private EnginePushMessage(Name alias, Table<PushMessageRecord> aliased) {
        this(alias, aliased, null);
    }

    private EnginePushMessage(Name alias, Table<PushMessageRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>push.push_message</code> table reference
     */
    public EnginePushMessage(String alias) {
        this(DSL.name(alias), ENGINE_PUSH_MESSAGE);
    }

    /**
     * Create an aliased <code>push.push_message</code> table reference
     */
    public EnginePushMessage(Name alias) {
        this(alias, ENGINE_PUSH_MESSAGE);
    }

    /**
     * Create a <code>push.push_message</code> table reference
     */
    public EnginePushMessage() {
        this(DSL.name("push_message"), null);
    }

    @Override
    public Schema getSchema() {
        return Push.PUSH;
    }

    @Override
    public Identity<PushMessageRecord, Integer> getIdentity() {
        return (Identity<PushMessageRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<PushMessageRecord> getPrimaryKey() {
        return Keys.PUSH_MESSAGE_PKEY;
    }

    @Override
    public List<UniqueKey<PushMessageRecord>> getKeys() {
        return Arrays.<UniqueKey<PushMessageRecord>>asList(Keys.PUSH_MESSAGE_PKEY);
    }

    @Override
    public List<ForeignKey<PushMessageRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PushMessageRecord, ?>>asList(Keys.PUSH_MESSAGE__PUSH_MESSAGE_APPLICATION_ID_FKEY);
    }

    @Override
    public EnginePushMessage as(String alias) {
        return new EnginePushMessage(DSL.name(alias), this);
    }

    @Override
    public EnginePushMessage as(Name alias) {
        return new EnginePushMessage(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EnginePushMessage rename(String name) {
        return new EnginePushMessage(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EnginePushMessage rename(Name name) {
        return new EnginePushMessage(name, null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<Integer, Integer, Jsonb, String, String, Integer, Instant, Instant, Instant, String, Instant, String, Integer> fieldsRow() {
        return (Row13) super.fieldsRow();
    }
}
